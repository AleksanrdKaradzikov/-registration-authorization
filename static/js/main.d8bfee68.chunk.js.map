{"version":3,"sources":["actions/index.js","reduсers/index.js","components/header/header.jsx","components/header/index.js","components/authorization-page/authorization-page.jsx","components/authorization-page/index.js","components/regestration-page/regestration-page.jsx","components/regestration-page/index.js","components/home-page/home-page.jsx","components/home-page/index.js","components/app/app.jsx","components/app/index.js","index.js"],"names":["userReg","createAction","userRegErr","userLogin","userLoginErr","userExit","user","handleActions","actions","state","reg","payload","isSuccessful","error","us","userData","isAuthorized","rootReducer","combineReducers","Header","pageName","links","to","className","map","link","key","defaultProps","validationSchema","Yup","shape","password","min","max","required","email","actionCreators","login","data","resetForm","dispatch","a","async","fetch","method","headers","body","response","ok","json","then","AuthorizationPage","props","handleLoginSbm","JSON","stringify","this","render","exact","path","initialValues","onSubmit","values","setSubmitting","name","type","placeholder","id","msg","React","Component","connect","username","registration","err","errors","RegestrationPage","handleRegestrationSbm","exit","HomePage","App","component","store","createStore","redusers","composeWithDevTools","applyMiddleware","thunk","document","getElementById"],"mappings":"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","file":"static/js/main.d8bfee68.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\n\nexport const userReg = createAction('USER_REG');\nexport const userRegErr = createAction('USER_REG_ERROR');\nexport const userLogin = createAction('USER_LOGIN');\nexport const userLoginErr = createAction('USER_LOGIN_ERROR');\nexport const userExit = createAction('USER_LOGIN_EXIT');\n\nexport const registration = (data, resetForm) => async dispatch => {\n  const response = await fetch(`https://conduit.productionready.io/api/users/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: data,\n  });\n\n  if (response.ok) {\n    resetForm();\n    return dispatch(userReg({ reg: true }));\n  }\n\n  const error = await response.json().then(err => {\n    return err.errors;\n  });\n\n  return dispatch(userRegErr({ error }));\n};\n\nexport const login = (data, resetForm) => async dispatch => {\n  const response = await fetch(`https://conduit.productionready.io/api/users/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: data,\n  });\n\n  if (response.ok) {\n    const user = await response.json().then(userData => {\n      return userData;\n    });\n    resetForm();\n    return dispatch(userLogin({ user: { ...user.user } }));\n  }\n\n  return dispatch(userLoginErr());\n};\n\nexport const exit = () => {\n  return userExit();\n};\n","import { combineReducers } from 'redux';\nimport { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nconst user = handleActions(\n  {\n    [actions.userReg](state, { payload: { reg } }) {\n      return { ...state, isSuccessful: reg, error: null };\n    },\n    [actions.userRegErr](state, { payload: { error } }) {\n      return { ...state, isSuccessful: null, error };\n    },\n    [actions.userLogin](state, { payload: { user: us } }) {\n      return { ...state, userData: { ...us }, isAuthorized: true };\n    },\n    [actions.userLoginErr](state) {\n      return { ...state, error: true };\n    },\n    [actions.userExit](state) {\n      return {\n        ...state,\n        isSuccessful: null,\n        isAuthorized: null,\n        error: null,\n        userData: null,\n      };\n    },\n  },\n  {\n    isSuccessful: null,\n    isAuthorized: null,\n    error: null,\n    userData: null,\n  }\n);\n\nconst rootReducer = combineReducers({ user });\n\nexport default rootReducer;\n","import React from 'react';\nimport './header.css';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ pageName, links = [], to = null }) => {\n  return (\n    <header className=\"header\">\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <h3 className=\"header__heading\">{pageName}</h3>\n        </div>\n        <div className=\"col-6\">\n          <ul className=\"header__list\">\n            {links.map(link => {\n              return (\n                <li key={link} className=\"header__list-item\">\n                  <Link className=\"header-link\" to={to}>\n                    {link}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    </header>\n  );\n};\n\n\n\nexport default Header;\n\nHeader.defaultProps = {\n  pageName: 'Главная страница',\n  links: [],\n  to: null,\n};\n\nHeader.propTypes = {\n  pageName: PropTypes.string,\n  links: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string])),\n  to: PropTypes.string,\n};\n","import Header from './header';\n\nexport default Header;\n","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link, Redirect, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../header';\nimport * as actions from '../../actions';\nimport './authorization-page.css';\n\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(8, 'Не менее 8 символов')\n    .max(40, 'Не более 40 символов')\n    .required('Обязательное поле'),\n  email: Yup.string()\n    .email('Введите корректный email адресс')\n    .required('Обязательное поле'),\n});\n\nconst mapStateToProps = ({ user }) => {\n  const props = {\n    isAuthorized: user.isAuthorized,\n    error: user.error,\n  };\n\n  return props;\n};\n\nconst actionCreators = {\n  login: actions.login,\n};\n\nclass AuthorizationPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleLoginSbm = ({ password, email }, resetForm) => {\n    const { login } = this.props;\n    const data = JSON.stringify({\n      user: {\n        email,\n        password,\n      },\n    });\n    login(data, resetForm);\n  };\n\n  render() {\n    const { isAuthorized, error } = this.props;\n    const render = () => (isAuthorized ? <Redirect to=\"/\" /> : null);\n    return (\n      <>\n        <Route exact path=\"/login\" render={render} />\n        <Header pageName=\"Страница авторизации\" links={['Регестрация']} to=\"/signup\" />\n        <div className=\"wrapper-page\">\n          <h2 className=\"wrapper-page__heading\">Авторизоваться</h2>\n          <p className=\"wrapper-page__text\">\n            Чтобы войти на сайт используйте ваш email и пароль, которые были указаны при регистрации\n            на сайт\n          </p>\n          <Formik\n            initialValues={{ email: '', password: '' }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting, resetForm }) => {\n              setSubmitting(false);\n              this.handleLoginSbm(values, resetForm);\n            }}\n          >\n            <Form className=\"form-auhorization\">\n              <Field\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Ваш Email\"\n                className=\"form-auhorization__input\"\n                id=\"email\"\n              />\n              <ErrorMessage name=\"email\">\n                {msg => <div className=\"form-auhorization__error--message\">{msg}</div>}\n              </ErrorMessage>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                placeholder=\"Ваш пароль\"\n                className=\"form-auhorization__input\"\n              />\n              <ErrorMessage name=\"password\">\n                {msg => <div className=\"form-auhorization__error--message\">{msg}</div>}\n              </ErrorMessage>\n              {error ? (\n                <div className=\"form-auhorization__error--message\">\n                  Неправильный email или пароль\n                </div>\n              ) : null}\n              <button className=\"btn-submit\" type=\"submit\">\n                Войти в личный кабинет\n              </button>\n              <Link to=\"/signup\">\n                <button className=\"btn-standart\" type=\"button\">\n                  Зарегестрироваться\n                </button>\n              </Link>\n            </Form>\n          </Formik>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, actionCreators)(AuthorizationPage);\n\nAuthorizationPage.defaultProps = {\n  isAuthorized: null,\n  login: () => {},\n  error: {},\n};\n\nAuthorizationPage.propTypes = {\n  isAuthorized: PropTypes.bool,\n  login: PropTypes.func,\n  error: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string])),\n};\n","import AuthorizationPage from './authorization-page';\n\nexport default AuthorizationPage;\n","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport * as actions from '../../actions';\nimport Header from '../header';\nimport './regestration-page.css';\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(2, 'Имя пользователя не менее 2 символов')\n    .max(40, 'Имя пользователя не более 40 символов')\n    .required('Обязательное поле'),\n  password: Yup.string()\n    .min(8, 'Пароль не менее 8 символов')\n    .max(40, 'Пароль не более 40 символов')\n    .required('Обязательное поле'),\n  email: Yup.string()\n    .email('Введите корректный email адресс')\n    .required('Обязательное поле'),\n});\n\nconst mapStateToProps = ({ user }) => {\n  const props = {\n    isSuccessful: user.isSuccessful,\n    error: user.error,\n  };\n\n  return props;\n};\n\nconst actionCreators = {\n  registration: actions.registration,\n};\n\nclass RegestrationPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleRegestrationSbm = ({ username, password, email }, resetForm) => {\n    const { registration } = this.props;\n    const data = JSON.stringify({\n      user: {\n        username,\n        email,\n        password,\n      },\n    });\n    registration(data, resetForm);\n  };\n\n  render() {\n    const { isSuccessful, error } = this.props;\n    return (\n      <>\n        <Header pageName=\"Страница регестрации\" links={['авторизация']} to=\"/login\" />\n        <div className=\"wrapper-page\">\n          <h2 className=\"wrapper-page__heading\">Регестрация</h2>\n          <p className=\"wrapper-page__text\">\n            Введите имя пользователя, email адресс и пароль для регестрации в личном кабинете\n          </p>\n          <Formik\n            initialValues={{ username: '', email: '', password: '' }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting, resetForm }) => {\n              setSubmitting(isSuccessful);\n              this.handleRegestrationSbm(values, resetForm);\n            }}\n          >\n            <Form className=\"form-regestration\">\n              <Field\n                name=\"username\"\n                type=\"text\"\n                placeholder=\"Имя пользователя\"\n                className=\"form-regestration__input\"\n                id=\"username\"\n              />\n              <ErrorMessage name=\"username\">\n                {msg => <div className=\"form-regestration__error--message\">{msg}</div>}\n              </ErrorMessage>\n              {error ? (\n                <div className=\"form-regestration__error--message\">{error.username}</div>\n              ) : null}\n              <Field\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Ваш Email\"\n                className=\"form-regestration__input\"\n                id=\"email\"\n              />\n              <ErrorMessage name=\"email\">\n                {msg => <div className=\"form-regestration__error--message\">{msg}</div>}\n              </ErrorMessage>\n              {error ? (\n                <div className=\"form-regestration__error--message\">{error.email}</div>\n              ) : null}\n              <Field\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                placeholder=\"Ваш пароль\"\n                className=\"form-regestration__input\"\n              />\n              <ErrorMessage name=\"password\">\n                {msg => <div className=\"form-regestration__error--message\">{msg}</div>}\n              </ErrorMessage>\n              {error ? (\n                <div className=\"form-regestration__error--message\">{error.password}</div>\n              ) : null}\n              <button className=\"btn-submit\" type=\"submit\">\n                Зарегестрироваться\n              </button>\n              <Link to=\"/login\">\n                <button className=\"btn-standart\" type=\"button\">\n                  Уже зарегестрированы?\n                </button>\n              </Link>\n              {isSuccessful ? (\n                <div className=\"successes-message\">Регестрация прошла успешно</div>\n              ) : null}\n            </Form>\n          </Formik>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, actionCreators)(RegestrationPage);\n\nRegestrationPage.defaultProps = {\n  registration: null,\n  isSuccessful: null,\n  error: null,\n};\n\nRegestrationPage.propTypes = {\n  registration: PropTypes.func,\n  isSuccessful: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string])),\n};\n","import RegestrationPage from './regestration-page';\n\nexport default RegestrationPage;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../header';\nimport * as actions from '../../actions';\nimport './home-page.css';\n\nconst mapStateToProps = ({ user }) => {\n  const props = {\n    id: user.userData.id,\n    email: user.userData.email,\n    username: user.userData.username,\n  };\n\n  return props;\n};\n\nconst actionCreators = {\n  exit: actions.exit,\n};\n\nconst HomePage = ({ id, email, username, exit }) => {\n  return (\n    <>\n      <Header pageName=\"Главная страница\" />\n      <div className=\"wrapper-page\">\n        <div className=\"container\">\n          <form className=\"home-page-form\" onSubmit={exit}>\n            <div className=\"home-page-form__label\">id: {id}</div>\n            <div className=\"home-page-form__label\">Email: {email}</div>\n            <div className=\"home-page-form__label\">Имя пользователя: {username}</div>\n            <button className=\"btn-exit\" type=\"submit\">\n              Выйти из личного кабинета\n            </button>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, actionCreators)(HomePage);\n\nHomePage.defaultProps = {\n  id: '',\n  email: '',\n  username: '',\n  exit: () => {},\n};\n\nHomePage.propTypes = {\n  id: PropTypes.string,\n  email: PropTypes.string,\n  username: PropTypes.string,\n  exit: PropTypes.func,\n};\n","import HomePage from './home-page';\n\nexport default HomePage;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport AuthorizationPage from '../authorization-page';\nimport RegestrationPage from '../regestration-page';\nimport HomePage from '../home-page';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'normalize.css';\nimport '../../styles/style.css';\n\nconst mapStateToProps = ({ user }) => {\n  const props = {\n    isAuthorized: user.isAuthorized,\n  };\n\n  return props;\n};\n\nconst App = ({ isAuthorized }) => {\n  const render = () => (!isAuthorized ? <Redirect to=\"/login\" /> : <HomePage />);\n  return (\n    <div className=\"container\">\n      <Router>\n        <header>home-page</header>\n        <Route path=\"/\" exact render={render} />\n        <Route path=\"/login\" component={AuthorizationPage} />\n        <Route path=\"/signup\" component={RegestrationPage} />\n      </Router>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(App);\n\nApp.defaultProps = {\n  isAuthorized: null,\n};\n\nApp.propTypes = {\n  isAuthorized: PropTypes.bool,\n};\n","import App from './app';\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport redusers from './reduсers';\nimport App from './components/app';\n\nconst store = createStore(redusers, composeWithDevTools(applyMiddleware(thunk)));\n\nrender(\n  // eslint-disable-next-line react/jsx-filename-extension\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}